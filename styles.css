/* Global */

:root {
    --ColorDisplay-height: 15%;
    --Footer-height: 20px;

    /* Font Sizes */
    --Font-Size-Large: 48px;
    --Font-Size-Regular: 14px;

    /* Spacing */
    --Normal-Spacing: 4px;

    --Normal-Border: 1px;

    /* Colors */
    --Normal-Text: #a4bac7;

    --Normal-Background: #0c1418;
    --Light-Background: #1e2930;
    --Dark-Background: #040709;

    --Normal-Foreground: #626f78;
    --Light-Foreground: #a4bac7;
    --Dark-Foreground: #4d585f;

    --Normal-Accent: #0091c9;
    --Light-Accent: #00b9ff;
    --Dark-Accent: #004663;

    --Normal-Secondary: #ca0020;
    --Light-Secondary: #ff002b;
    --Dark-Secondary: #67000b;

    /* Timing */
    --Timing-Normal: 150ms;
    --Timing-Short: 50ms;
    --Timing-Shorter: 25ms;

    --Transition-Normal: cubic-bezier(0, 0.7, 0.3, 1);
}

@font-face {
    font-family: 'jetbrains';
    src: url('./fonts/JetBrainsMono[wght].ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
}

* {
    font-family: 'jetbrains', sans-serif;
    color: var(--Normal-Text);

    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
}

body,
html {
    height: 100vh;
    width: 100vw;

    min-height: 360px;
    min-width: 480px;

    margin: 0;
    padding: 0;

    overflow: hidden;

    background-color: var(--Normal-Background);

    touch-action: none;
}

/* Color Output */

.ColorDisplay {
    height: var(--ColorDisplay-height);
    width: 100%;
    background-color: #333;
    display: flex;
    align-items: end;
    justify-content: flex-end;
}

.HexInput {
    align-self: flex-end;
    text-align: end;
    background: var(--Dark-Background);
    font-size: var(--Font-Size-Large);
    width: 4.25em;
    height: var(--Font-Size-Large);
    color: var(--Normal-Text);
    padding: none;
    border: var(--Normal-Spacing) solid var(--Normal-Background);
    transition: var(--Timing-Normal) var(--Transition-Normal) border;
}

.HexInput:focus {
    -webkit-appearance: none;
    appearance: none;
    outline: none;
    border: var(--Normal-Spacing) solid;
}

.CopyButton {
    justify-content: center;
    box-sizing: border-box;
    display: flex;
    height: calc(var(--Font-Size-Regular) * 2);
    width: calc(var(--Font-Size-Regular) * 2);

    background: var(--Normal-Background);
    outline: none;
    padding: 3;
    cursor: pointer;

    transition: background var(--Timing-Short) var(--Transition-Normal);
    outline: #2C9CEF solid 0px;
}

.CopyButton svg {
    height: 100%;
    background: none;
}

.CopyButton input[type=button] {
    display: none;
}

.CopyButton:hover {
    background: var(--Light-Background);
}

.CopyButton:active {
    background: var(--Dark-Background);
}

/* Options */

main {
    height: calc(100% - var(--ColorDisplay-height) - var(--Footer-height));

    /* Values */
    --Options-height: 40px;
    --Selector-width: 35%;
}

.ColorOptions {
    display: flex;
    justify-content: space-between;

    padding: calc(var(--Normal-Spacing) * 2);
    box-sizing: border-box;
    height: var(--Options-height);
    background-color: var(--Normal-Background);
}

.ColorSpaces {
    height: 100%;
    display: flex;
    width: fit-content;
}

.ColorOption input {
    display: none;
}

.ColorOption {
    box-sizing: border-box;

    display: flex;
    color: var(--Normal-Background);
    padding-left: calc(var(--Normal-Spacing) * 2);
    padding-right: calc(var(--Normal-Spacing) * 2);
    font-size: calc(var(--Options-height) / 2);
    background: var(--Normal-Accent);
    height: 100%;
    align-self: center;
    margin: auto;
    transition: var(--Timing-Short) var(--Transition-Normal);
    align-items: center;
}

.ColorOption:hover {
    background: var(--Light-Accent);
}

.ColorOption:active {
    background-color: var(--Dark-Background);
    color: var(--Dark-Accent);
}

.ColorOption:has(input:checked) {
    background-color: var(--Light-Background);
    color: var(--Normal-Text);
}

/* Modifiers */

.OptionsBox {
    display: flex;
    flex-direction: row;
    gap: var(--Normal-Spacing);
}

.ColorButton {
    justify-content: center;
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    background: var(--Normal-Accent);
    cursor: pointer;
    height: 100%;
    width: calc(var(--Font-Size-Regular) * 2.25);
    color: var(--Normal-Accent);
    transition: var(--Timing-Shorter) var(--Transition-Normal);
}

.icon {
    color: blue;
}


.ColorButton:hover {
    background: var(--Light-Accent);
}

.ColorButton:active {
    background-color: var(--Dark-Accent);
}

.ColorButton .locked {
    display: none;
}

.ColorButton:has(input:checked) {
    background-color: var(--Normal-Secondary);
}

.ColorButton:has(input:checked) .unlocked {
    display: none;
}

.ColorButton:has(input:checked) .locked {
    display: inline;
}


.ColorButton:has(input:checked):hover {
    background-color: var(--Light-Secondary);
}


.ColorButton:has(input:checked):active {
    background: var(--Dark-Secondary);
}

.ColorButton input {
    display: none;
}

/* Selector */

.ColorControls {
    height: calc(100% - var(--Options-height));
    display: flex;
}

.ColorSelector {
    height: 100%;
    width: var(--Selector-width);

    background-color: var(--Normal-Background);

    display: flex;
    align-items: start;
    align-self: flex-start;
    flex-direction: column;

    box-sizing: border-box;
    padding: var(--Normal-Spacing);
}


/* Selector Formatting */

.CursorSelectorElementsBox {
    display: grid;
    padding: 5%;
    box-sizing: border-box;
    height: 80%;
    width: 100%;
    aspect-ratio: 1;
    align-self: flex-start;
}

.ColorSelectorElement {
    grid-area: 1/1;
    width: 100%;
    height: 100%;
    margin: auto;
    aspect-ratio: 1;
    z-index: 1;

    cursor: pointer;
}

.ColorSelectorCircle {
    border-radius: 100%;
    overflow: hidden;
}

/* Selector Inputs */
.InputContainer {
    height: 20%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 6px;
    width: 100%;
}

.InputUnit {
    width: 100%;
    max-width: 350px;
    display: flex;
    align-items: center;
    flex-direction: row;
    --gap: 6px;
    gap: var(--gap);
    justify-content: space-between;
    box-sizing: border-box;

    max-height: calc((100% / 3) - var(--gap));
}

input[type="number"] {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: textfield;

    font-size: var(--Font-Size-Regular);
    box-sizing: border-box;
    width: calc(var(--Font-Size-Regular) * 3);
    border: var(--Light-Background) solid 2px;
    background: var(--Light-Background);
    outline: none;
    padding: 2px;
    z-index: 2;
    transition: border var(--Timing-Normal);
}


input[type="number"]:focus {
    -webkit-appearance: none;
    appearance: none;
    -moz-appearance: textfield;

    border: var(--Normal-Text) solid 2px;
}

input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    opacity: 1;
}

.NumberInputUnit {
    display: flex;
    flex-direction: row;

    max-height: calc(var(--Font-Size-Regular) * 1.5);
    height: 100%;
}

.ValueControlUnit {
    display: flex;
    flex-direction: column;
}

.ValueControl {
    -webkit-appearance: none;
    appearance: none;
    height: calc(50%);
    width: calc(var(--Font-Size-Regular) * 1.5);
    border: none;
    background: var(--Normal-Foreground);
    border-left: var(--Dark-Foreground) solid 1px;
    font-size: calc(50% - 2px);
    padding: 0;
    color: var(--Normal-Text);
    /* font-family: Arial, Helvetica, sans-serif; */
    font-weight: bold;
    margin: 0;

    text-overflow: clip;
}

.ValueControlUp {
    border-bottom: var(--Dark-Foreground) solid 1px;
}

.ValueControl:hover {
    background: var(--Light-Foreground);
    transition: 15ms;
}

.ValueControl:active {
    background: var(--Dark-Foreground);
}

.ValueControlDown {
    border-top: var(--Dark-Foreground) solid 1px;
}

.ColorSelectorElementCursor {
    pointer-events: none;
}

/* Palette Input */

:root {
    --Color-Palette-Input-Size: 45%;
}

.ColorPalette {
    display: flex;
    height: 100%;
    width: 100%;

    padding: calc(var(--Normal-Spacing) * 2);
    flex-direction: row;
    box-sizing: border-box;
    gap: var(--Normal-Spacing);

    background-color: var(--Normal-Background);
}

.ColorPaletteWraper {
    height: 100%;
    width: calc(100% - var(--Selector-width));

    container-type: size;
    container-name: ColorPaletteWraper;
}


.PaletteHeader {
    font-size: var(--Font-Size-Regular);
    line-height: 1;
    display: block;
}

.ColorPaletteInput {
    height: 100%;
    width: min(var(--Color-Palette-Input-Size), 225px);
    display: flex;
    gap: var(--Normal-Spacing);
    box-sizing: border-box;
    flex-direction: column;
}

.ColorPaletteInputUnit {
    height: calc((100% / 3) - (var(--Normal-Spacing) * (2/3)));
    width: 100%;
    gap: none;
    box-sizing: border-box;
}

.PaletteInput {
    appearance: none;

    resize: none;
    background: var(--Light-Background);
    border: none;

    padding: 0;
    outline: none;

    width: 100%;
    height: calc(100% - var(--Font-Size-Regular));
    box-sizing: border-box;
}

.ColorPaletteOutput {
    width: calc(100% - min(var(--Color-Palette-Input-Size), 225px));
    height: 100%;
    background-color: var(--Dark-Background);
    padding: var(--Normal-Spacing);
    display: flex;
    gap: calc(var(--Normal-Spacing) * 2);
    flex-direction: row;
    overflow-y: auto;
    flex-wrap: wrap;
    align-content: flex-start;
    align-self: flex-start;
    align-items: flex-start;

    box-sizing: border-box;
}

/* Palette Entries*/

.hexEntryCSS {
    height: 1.25rem;
    width: 5rem;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;

}

.hexHoverEffect {
    transition: 50ms;
    margin: auto;
    width: 100%;
    height: 100%;
    color: white;
    text-shadow: 0 0 2px black, 1px 1px 0 black, -1px -1px black, -1px 1px black, 1px -1px black;
}

.hexEntryCSS:hover>.hexHoverEffect {
    margin: auto;
    font-size: 0.85rem;
    opacity: 0;
}

.hexEntryCSS:active>.hexHoverEffect {
    font-size: 0.95rem;
}

.hexHoverEffectCopy {
    color: white;
    transition: 50ms;
    opacity: 0;
    font-size: 0.9rem;
    width: 100%;
    margin: auto;
    height: 100%;
    position: relative;
    margin-left: -100%;
    color: white;
    text-shadow: 0 0 2px black, 1px 1px 0 black, -1px -1px black, -1px 1px black, 1px -1px black;
}

.hexEntryCSS:hover>.hexHoverEffectCopy {
    opacity: 1;
}

.hexEntryCSS:active>.hexHoverEffectCopy {
    color: blue;
}

.paletteHueBox {
    background-color: var(--Normal-Background);
    box-sizing: border-box;
    padding: var(--Normal-Spacing);
    gap: var(--Normal-Spacing);
}

/* Sizing */

.PaletteLabel {
    display: none;
}

@media screen and (max-width: 700px) {
    .ColorPaletteWraper {
        width: 100%;
    }

    .ColorSelector {
        width: 100%;
    }

    .PaletteLabel {
        display: flex;
    }
}



@container ColorPaletteWraper (max-aspect-ratio: 1/1) {
    .ColorPalette {
        flex-direction: column;
    }

    .ColorPaletteInput {
        width: 100%;
        height: min(var(--Color-Palette-Input-Size) / 2, 225px);
        flex-direction: row;
    }

    .ColorPaletteInputUnit {
        width: calc((100% / 3) - var(--Normal-Spacing * (2/3)));
        height: 100%;
    }

    .ColorPaletteOutput {
        height: calc(100% - min(var(--Color-Palette-Input-Size) / 2, 225px));
        width: 100%;
    }
}

/* Download */
.exportWrapper {
    position: relative;
    align-items: end;
    display: flex;
    flex-direction: column;
}

.exportWindow {
    width: fit-content;
    background-color: var(--Light-Background);
    padding: var(--Normal-Spacing);
    gap: var(--Normal-Spacing);
    display: none;
    flex-direction: column;
    position: absolute;
    top: calc(100% + var(--Normal-Spacing));
    z-index: 1000;
}

.hexOption {
    display: flex;
    flex-direction: row;
    white-space: nowrap;
    justify-content: space-between;
    box-sizing: border-box;
    gap: var(--Normal-Spacing);
    line-height: var(--Font-Size-Regular);
    font-size: var(--Font-Size-Regular);
    height: var(--Font-Size-Regular);
    width: 100%;
}

.ToggleButton {
    margin-left: calc(var(--Normal-Spacing) * 6);
    width: calc(var(--Font-Size-Regular) * 3);
    height: 100%;
    background-color: var(--Normal-Secondary);
    display: block;
}

.ToggleButtonHandle {
    height: 100%;
    width: 50%;
    background-color: white;

    transition: margin var(--Timing-Normal);
}

.ToggleButton:hover {
    background: var(--Light-Secondary);
}

.ToggleButton:active {
    background-color: var(--Dark-Secondary);
}

.ToggleButton:has(input:checked) {
    background-color: var(--Normal-Accent);
}

.ToggleButton:has(input:checked):hover {
    background-color: var(--Light-Accent);
}


.ToggleButton:has(input:checked):active {
    background: var(--Dark-Accent);
}


.ToggleButton:has(input:checked) .ToggleButtonHandle {
    margin-left: 50%;
}

.infoButton {
    height: var(--Font-Size-Regular);
    width: var(--Font-Size-Regular);
    background-color: #837100;
}

.infoButton:hover {
    height: var(--Font-Size-Regular);
    width: var(--Font-Size-Regular);
    background-color: #837100;
}

.infoButton:active {
    height: var(--Font-Size-Regular);
    width: var(--Font-Size-Regular);
    background-color: #837100;
}

.exportWrapper:has(#exportButton:checked) .exportWindow {
    display: flex;
}

.downloadButton {
    color: var(--Light-Background);
    padding: var(--Normal-Spacing);
    width: 100%;
}

/* Footer */

footer {
    height: var(--Footer-height);
    background-color: var(--Light-Background);
    padding-left: var(--Normal-Spacing);
}
